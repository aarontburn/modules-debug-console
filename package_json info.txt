Scripts:




"build": "tsc && node copyFiles.js --submodule && npm run dev_export",
    Transpiles files (tsc), copies view code into the "dist" folder, then exports the module into .modules_dev



"electronmon": "npm run build && electronmon ./dist/main.js --dev",
    Builds module then starts electron with live reloading. 
        Issue: Electronmon treats non-built-in modules as renderer files, because
            they aren't technically imported directly into the main program and
            are dynamically imported at runtime. This makes this essentially worthless
            unless you are modifying other code. 

"watch": "tsc --watch",
    Watches any changes and re-transpiles code in realtime.

    Use with electronmon to enable live reloading for non-external modules.


"lint": "eslint -c .eslintrc --ext .ts ./src",
    Checks code.

"start": "npm run build && electron ./dist/main.js --dev",
    Builds module then starts electron.

"export": "node node_modules/modules-export-script/export.js",
    Exports the module; use when module is ready to test in a prod setting.

"dev_export": "node node_modules/modules-export-script/export.js --dev",
    Quick export module to .modules_dev/

    "--dev":
        - Doesn't modify "module_info.json"
        - Exports to developer folder

"react-start": "(cd %npm_package_config_react-wrapper-directory% && npm run build) && cd ../../../ && npm run electronmon",
    Builds the react project into a single HTML file in the directory "react_module", then starts electron with live reloading

"preinstall": "(cd %npm_package_config_react-wrapper-directory% && npm install)",
    Script that automatically runs before "npm install", just to initialize the wrapper

"start-vite": "cd %npm_package_config_react-wrapper-directory% && npm run dev",
    Starts the react-wrapper, usually to http://localhost:5173/


"test": "npm-run-all --parallel watch react-start start-vite"   


